Time Complexity:
----------------
                    The amount of time taken to execute the program or a statement.

O(1):
------
            Every time a constant amount of time is required to execute code.

O(logn):
--------
            A method with a logarithmic complexity , divides or multiplies the issue into little bits for each iteration (log n).
 It takes log(N) steps to execute a particular operation on N items, where the logarithm base is usually 2.
 
 Example 1: int n=8;
        for(int i=0;i<n;i/=2) // here, time complexity is logn, because the n value is divided by 2 in each step. 
                                8/2=4
                                4/2=2
                                2/2=1
    
    log n base 2  = log 8 base 2 => 2^3 = 8 =>3 times the loop repeats

    Example 2:
    ----------
                int n=8;
                for(int i=1;i<n;i*=2) // time complexity is logn.
                                         1*2=2
                                         2*2=4
                                         4*2=8
                                         the loop repeates 3 times i.e. log8 base 2 =>3

O(n):
----
        When an algorithm executes n steps for input size n  and the time consumed by the process changes linearly as the input size rises,
         the algorithm is said to have O complexity (n). 

Example: int n=100;
         for(int i=0;i<=n;i++){
            System.out.println(i); // time complexity is O(n), it executes n times i.e., 100 times
         }

O(nlogn):
--------
        An algorithm with an O(n log n) complexity divides the issue into little chunks for each invocation, 
        then takes each of the smallest bits and stitches them back together (n log n).
         Executing a given operation on N items takes N*log(N) steps.

O(n^2):
-------
        A function with quadratic time complexity has growth rate of n^2. If input size is 2, it will do 4 operations, if 4 it will do 16 operations.

O(n^3):
------
        A function with cubic time complexity has growth rate of n^3. If input size is 2, it will do 8 operations.

O(2^n):
-------
        The caluculations done by the algorithm doubles every time as the input grows. if input is 4, it will do 2*2*2*2=16.

O(n!):
-----
        The time complexity is very high in this case. For example, n=15, then it will do (15*14*13*12*11*10*9*8*7*6*5*4*3*2*1) operations.

